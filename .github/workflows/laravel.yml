name: Laravel

on:
  push:
    branches: [ master ]
    
jobs:
  test-host:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: testdb
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
    - name: Verify MySQL connection from host
      run: |
        sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -ppassword -e "SHOW DATABASES"
  laravel-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: testdb
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
    - uses: actions/checkout@v2
    - name: Create storage directories
      run: mkdir -p storage/framework/{sessions,views,cache}
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Run Migration
      run: php artisan migrate:fresh
      env:
        DB_PORT: ${{ job.services.mysql.ports[3306] }}
        APP_ENV: testing
        DB_CONNECTION: mysql
        DB_NAME: testdb
        DB_PASSWORD: 
        DB_USER: root
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_PORT: ${{ job.services.mysql.ports[3306] }}
        APP_ENV: testing
        DB_CONNECTION: mysql
        DB_NAME: testdb
        DB_PASSWORD: 
        DB_USER: root
      run: vendor/bin/phpunit
    - uses: 8398a7/action-slack@v3
      with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow # selectable (default: repo,message)
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      if: always() # Pick up events even if the job fails or is canceled.
